///
/// JHybridContactListenerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridContactListenerSpec.hpp"

// Forward declaration of `ContactEvent` to properly resolve imports.
namespace margelo::nitro::contactlistner { struct ContactEvent; }
// Forward declaration of `ContactEventType` to properly resolve imports.
namespace margelo::nitro::contactlistner { enum class ContactEventType; }

#include <functional>
#include "ContactEvent.hpp"
#include "JFunc_void_ContactEvent.hpp"
#include "JContactEvent.hpp"
#include "ContactEventType.hpp"
#include "JContactEventType.hpp"
#include <string>

namespace margelo::nitro::contactlistner {

  jni::local_ref<JHybridContactListenerSpec::jhybriddata> JHybridContactListenerSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridContactListenerSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridContactListenerSpec::initHybrid),
    });
  }

  size_t JHybridContactListenerSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  void JHybridContactListenerSpec::startListening(const std::function<void(const ContactEvent& /* event */)>& callback) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_ContactEvent::javaobject> /* callback */)>("startListening_cxx");
    method(_javaPart, JFunc_void_ContactEvent_cxx::fromCpp(callback));
  }
  void JHybridContactListenerSpec::stopListening() {
    static const auto method = javaClassStatic()->getMethod<void()>("stopListening");
    method(_javaPart);
  }

} // namespace margelo::nitro::contactlistner
