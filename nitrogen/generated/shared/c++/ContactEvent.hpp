///
/// ContactEvent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ContactEventType` to properly resolve imports.
namespace margelo::nitro::contactlistner { enum class ContactEventType; }

#include "ContactEventType.hpp"
#include <string>

namespace margelo::nitro::contactlistner {

  /**
   * A struct which can be represented as a JavaScript object (ContactEvent).
   */
  struct ContactEvent {
  public:
    ContactEventType type     SWIFT_PRIVATE;
    std::string contactId     SWIFT_PRIVATE;

  public:
    ContactEvent() = default;
    explicit ContactEvent(ContactEventType type, std::string contactId): type(type), contactId(contactId) {}
  };

} // namespace margelo::nitro::contactlistner

namespace margelo::nitro {

  using namespace margelo::nitro::contactlistner;

  // C++ ContactEvent <> JS ContactEvent (object)
  template <>
  struct JSIConverter<ContactEvent> final {
    static inline ContactEvent fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ContactEvent(
        JSIConverter<ContactEventType>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "contactId"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ContactEvent& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "type", JSIConverter<ContactEventType>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "contactId", JSIConverter<std::string>::toJSI(runtime, arg.contactId));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<ContactEventType>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "contactId"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
