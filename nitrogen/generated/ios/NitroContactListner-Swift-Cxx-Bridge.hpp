///
/// NitroContactListner-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ContactEventType` to properly resolve imports.
namespace margelo::nitro::contactlistner { enum class ContactEventType; }
// Forward declaration of `ContactEvent` to properly resolve imports.
namespace margelo::nitro::contactlistner { struct ContactEvent; }
// Forward declaration of `HybridContactListenerSpec` to properly resolve imports.
namespace margelo::nitro::contactlistner { class HybridContactListenerSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridContactListenerSpec_cxx` to properly resolve imports.
namespace NitroContactListner { class HybridContactListenerSpec_cxx; }

// Include C++ defined types
#include "ContactEvent.hpp"
#include "ContactEventType.hpp"
#include "HybridContactListenerSpec.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::contactlistner::bridge::swift {

  // pragma MARK: std::function<void(const ContactEvent& /* event */)>
  /**
   * Specialized version of `std::function<void(const ContactEvent&)>`.
   */
  using Func_void_ContactEvent = std::function<void(const ContactEvent& /* event */)>;
  /**
   * Wrapper class for a `std::function<void(const ContactEvent& / * event * /)>`, this can be used from Swift.
   */
  class Func_void_ContactEvent_Wrapper final {
  public:
    explicit Func_void_ContactEvent_Wrapper(std::function<void(const ContactEvent& /* event */)>&& func): _function(std::make_shared<std::function<void(const ContactEvent& /* event */)>>(std::move(func))) {}
    inline void call(ContactEvent event) const {
      _function->operator()(event);
    }
  private:
    std::shared_ptr<std::function<void(const ContactEvent& /* event */)>> _function;
  };
  Func_void_ContactEvent create_Func_void_ContactEvent(void* _Nonnull swiftClosureWrapper);
  inline Func_void_ContactEvent_Wrapper wrap_Func_void_ContactEvent(Func_void_ContactEvent value) {
    return Func_void_ContactEvent_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::contactlistner::HybridContactListenerSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::contactlistner::HybridContactListenerSpec>`.
   */
  using std__shared_ptr_margelo__nitro__contactlistner__HybridContactListenerSpec_ = std::shared_ptr<margelo::nitro::contactlistner::HybridContactListenerSpec>;
  std::shared_ptr<margelo::nitro::contactlistner::HybridContactListenerSpec> create_std__shared_ptr_margelo__nitro__contactlistner__HybridContactListenerSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__contactlistner__HybridContactListenerSpec_(std__shared_ptr_margelo__nitro__contactlistner__HybridContactListenerSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::contactlistner::HybridContactListenerSpec>
  using std__weak_ptr_margelo__nitro__contactlistner__HybridContactListenerSpec_ = std::weak_ptr<margelo::nitro::contactlistner::HybridContactListenerSpec>;
  inline std__weak_ptr_margelo__nitro__contactlistner__HybridContactListenerSpec_ weakify_std__shared_ptr_margelo__nitro__contactlistner__HybridContactListenerSpec_(const std::shared_ptr<margelo::nitro::contactlistner::HybridContactListenerSpec>& strong) { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::contactlistner::bridge::swift
