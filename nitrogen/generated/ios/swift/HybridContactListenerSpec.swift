///
/// HybridContactListenerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridContactListenerSpec``
public protocol HybridContactListenerSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func startListening(callback: @escaping (_ event: ContactEvent) -> Void) throws -> Void
  func stopListening() throws -> Void
}

/// See ``HybridContactListenerSpec``
public class HybridContactListenerSpec_base {
  private weak var cxxWrapper: HybridContactListenerSpec_cxx? = nil
  public func getCxxWrapper() -> HybridContactListenerSpec_cxx {
  #if DEBUG
    guard self is HybridContactListenerSpec else {
      fatalError("`self` is not a `HybridContactListenerSpec`! Did you accidentally inherit from `HybridContactListenerSpec_base` instead of `HybridContactListenerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridContactListenerSpec_cxx(self as! HybridContactListenerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ContactListener HybridObject.
 * Implement this protocol to create Swift-based instances of ContactListener.
 * ```swift
 * class HybridContactListener : HybridContactListenerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridContactListenerSpec = HybridContactListenerSpec_protocol & HybridContactListenerSpec_base
